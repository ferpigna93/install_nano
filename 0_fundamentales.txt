Codigos fundamentales a instalar en PCs nano (Actualizado 08/2025)

1. HDF5

cd /soft
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.14/hdf5-1.14.6/src/hdf5-1.14.6.tar.gz
tar -xvf hdf5-1.14.6.tar.gz
cd hdf5-1.14.6

./configure CC=mpiicx CXX=mpiicpx FC=mpiifx \
  --prefix=/usr/local/hdf5 \
  --enable-parallel \
  --enable-fortran \
  --enable-shared \
  --with-zlib=yes \
  --enable-build-mode=production

make -j"$(nproc)"

export LIBRARY_PATH=$I_MPI_ROOT/lib/release:$LIBRARY_PATH
export LD_LIBRARY_PATH=$I_MPI_ROOT/lib/release:$LD_LIBRARY_PATH

sudo env "PATH=$PATH" \
         "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" \
         "LIBRARY_PATH=$LIBRARY_PATH" \
         make install

2. VASP

cp arch/makefile.include.oneapi makefile.include

editar makefile.include

# Intel MKL (FFTW, BLAS, LAPACK, and scaLAPACK)
# (Note: for Intel Parallel Studio's MKL use -mkl instead of -qmkl)
FCL        += -qmkl=sequential
MKLROOT ?= $(MKLROOT)
LLIBS      += -L$(MKLROOT)/lib/intel64 -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64
INCS        =-I$(MKLROOT)/include/fftw

# HDF5-support (optional but strongly recommended, and mandatory for some features)
CPP_OPTIONS+= -DVASP_HDF5
HDF5_ROOT  ?= /usr/local/hdf5
LLIBS      += -L$(HDF5_ROOT)/lib -lhdf5_fortran
INCS       += -I$(HDF5_ROOT)/include

make all 

3. WANNIER90

wget 

cp make.inc.ifort make.inc

editar make.inc

# =====================================================
# Linux 64-bit • Intel oneAPI (ifx/mpiifx) • MKL (LP64)
# =====================================================

# --- Comunicación: serial o MPI (usa MPI aquí)
COMMS   = mpi

# --- Compiladores
F90     = ifx
MPIF90  = mpiifx
MPILD   = $(MPIF90)

# --- Flags de compilación/enlace (conservadores y rápidos)
FCOPTS  = -O3 -xHost -assume byterecl -free -traceback
LDOPTS  = $(FCOPTS)

# ====================================================
# BLAS/LAPACK vía Intel MKL (oneAPI)
# setvars.sh define MKLROOT
# Opción simple: qmkl=sequential (suficiente para wannier90)
# ====================================================
LIBS    = -qmkl=sequential

# --- Alternativa (enlace explícito) ---
#LIBDIR  = $(MKLROOT)/lib/intel64
#LIBS    = -L$(LIBDIR) -lmkl_intel_lp64 -lmkl_core -lmkl_sequential

# --- (Opcional) MKL con OpenMP ---
#FCOPTS += -qopenmp
#LDOPTS += -qopenmp
#LIBS    = -qmkl


make all

4. Quantum Espresso QE

sudo apt-get update
sudo apt-get install -y git

cd /soft/qe-7.4.1/build
rm -f CMakeCache.txt
source /opt/intel/oneapi/setvars.sh
export HDF5_ROOT=/usr/local/hdf5

cmake .. \
  -DCMAKE_BUILD_TYPE=Release \
  -DQE_ENABLE_MPI=ON \
  -DQE_ENABLE_SCALAPACK=ON \
  -DBLA_VENDOR=Intel10_64lp_seq \
  -DQE_ENABLE_HDF5=ON \
  -DHDF5_ROOT="${HDF5_ROOT}" \
  -DCMAKE_Fortran_COMPILER=mpiifx \
  -DCMAKE_C_COMPILER=mpiicx \
  -DCMAKE_CXX_COMPILER=mpiicpx \
  -DCMAKE_Fortran_FLAGS="-O3 -xHost -assume byterecl" \
  -DCMAKE_EXE_LINKER_FLAGS="-qmkl=sequential -Wl,-rpath,${HDF5_ROOT}/lib" \
  -DCMAKE_INSTALL_PREFIX=/soft/qe-7.4.1/install   # ojo: 'install' con doble 'l'


cmake --build . -j"$(nproc)"
cmake --install .

	5. vaspkit

Bajar https://sourceforge.net/projects/vaspkit/files/Binaries/
source setup.sh
Debería dejar todo pronto (~/.vaspkit), sino se puede copiar de otra nano y ajustar (sobretodo los paths a los potpaw de VASP .54) y el camino a python3
Para dejar andando el autoplot y que imprima los jpg automático
Pip3  uninstall pillow
Pip3 install pillow
